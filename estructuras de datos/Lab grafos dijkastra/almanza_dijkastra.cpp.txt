
/******************************************
 Nombre: Sebastián Almanza Galvis
 Asignatura: Estructura de datos
 Fecha: 30/10/24
 Actividad: Laborarotio Grafos
 ******************************************/

#include <iostream>
#include <climits>
using namespace std;

// Función para encontrar el vértice con la distancia mínima desde la fuente
int miniDist(int distance[], bool Tset[]) {
    int minimum = INT_MAX, ind;
    for (int k = 0; k < 7; k++) {
        if (Tset[k] == false && distance[k] <= minimum) {
            minimum = distance[k];
            ind = k;
        }
    }
    return ind;
}

// Implementación del Algoritmo de Dijkstra para encontrar la distancia mínima desde la fuente
void DijkstraAlgo(int graph[7][7], int src) {
    int distance[7];    // Array de distancias desde la fuente
    bool Tset[7];       // Array que indica si el vértice ha sido incluido en el conjunto de la distancia más corta

    for (int k = 0; k < 7; k++) {
        distance[k] = INT_MAX; // Inicializa todas las distancias como "infinito"
        Tset[k] = false;       // Marca todos los vértices como no visitados
    }

    distance[src] = 0; // La distancia de la fuente a sí misma es siempre 0

    for (int k = 0; k < 7; k++) {
        int m = miniDist(distance, Tset); // Selecciona el vértice con la distancia mínima
        Tset[m] = true; // Marca el vértice como procesado

        for (int k = 0; k < 7; k++) {
            // Actualiza la distancia si no se ha visitado y se encuentra una ruta más corta
            if (!Tset[k] && graph[m][k] && distance[m] != INT_MAX && distance[m] + graph[m][k] < distance[k])
                distance[k] = distance[m] + graph[m][k];
        }
    }

    // Imprime las distancias desde la fuente a cada vértice
    cout << "Vertice \t\t Distancia desde la fuente al Vertice" << endl;
    for (int k = 0; k < 7; k++) {
        char str = 65 + k; // Convierte a representación de letras (A, B, C...)
        cout << str << "\t\t\t" << distance[k] << endl;
    }
}

int main() {
    // Matriz de adyacencia del grafo
    int graph[7][7] = {
        {0, 2, 4, 0, 0, 0, 0},
        {2, 0, 0, 5, 0, 0, 0},
        {4, 0, 0, 8, 0, 0, 0},
        {0, 5, 8, 0, 10, 15, 0},
        {0, 0, 0, 10, 0, 6, 2},
        {0, 0, 0, 15, 6, 0, 6},
        {0, 0, 0, 0, 2, 2, 0}
    };
    DijkstraAlgo(graph, 0); // Llama a la función con el nodo fuente en 0 (A)
    return 0;
}


